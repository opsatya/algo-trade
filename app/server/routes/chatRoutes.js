import express from 'express';
const router = express.Router();
import ChatMessage from '../models/chatMessage.js';
import { authenticate } from '../middlewares/auth.js';
// Middleware to protect chat routes
router.use(authenticate);

// Get chat history
router.get('/history', async (req, res) => {
  try {
    const messages = await ChatMessage.find({ userId: req.user._id })
      .sort({ createdAt: 1 })
      .limit(100);
    
    return res.status(200).json({ success: true, messages });
  } catch (error) {
    console.error('Get chat history error:', error);
    return res.status(500).json({ success: false, message: 'Failed to fetch chat history' });
  }
});

// Send message and get AI response
router.post('/message', async (req, res) => {
  try {
    const { content } = req.body;
    
    // Save user message
    const userMessage = new ChatMessage({
      userId: req.user._id,
      content,
      isUserMessage: true
    });
    await userMessage.save();
    
    // Generate AI response (this would be integrated with your AI service)
    const aiResponse = "This is a placeholder AI response. In a real implementation, this would be generated by your AI trading assistant.";
    
    // Save AI response
    const aiMessage = new ChatMessage({
      userId: req.user._id,
      content: aiResponse,
      isUserMessage: false
    });
    await aiMessage.save();
    
    return res.status(200).json({
      success: true,
      messages: [
        {
          id: userMessage._id,
          content: userMessage.content,
          isUserMessage: true,
          createdAt: userMessage.createdAt
        },
        {
          id: aiMessage._id,
          content: aiMessage.content,
          isUserMessage: false,
          createdAt: aiMessage.createdAt
        }
      ]
    });
  } catch (error) {
    console.error('Send message error:', error);
    return res.status(500).json({ success: false, message: 'Failed to process message' });
  }
});

export default router;